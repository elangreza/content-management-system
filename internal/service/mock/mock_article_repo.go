// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/elangreza/content-management-system/internal/service (interfaces: articleRepo)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_article_repo.go -package=service_mock . articleRepo
//

// Package service_mock is a generated GoMock package.
package service_mock

import (
	context "context"
	reflect "reflect"

	constanta "github.com/elangreza/content-management-system/internal/constanta"
	entity "github.com/elangreza/content-management-system/internal/entity"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockarticleRepo is a mock of articleRepo interface.
type MockarticleRepo struct {
	ctrl     *gomock.Controller
	recorder *MockarticleRepoMockRecorder
	isgomock struct{}
}

// MockarticleRepoMockRecorder is the mock recorder for MockarticleRepo.
type MockarticleRepoMockRecorder struct {
	mock *MockarticleRepo
}

// NewMockarticleRepo creates a new mock instance.
func NewMockarticleRepo(ctrl *gomock.Controller) *MockarticleRepo {
	mock := &MockarticleRepo{ctrl: ctrl}
	mock.recorder = &MockarticleRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockarticleRepo) EXPECT() *MockarticleRepoMockRecorder {
	return m.recorder
}

// CreateArticle mocks base method.
func (m *MockarticleRepo) CreateArticle(ctx context.Context, article entity.Article, articleVersion entity.ArticleVersion) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", ctx, article, articleVersion)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockarticleRepoMockRecorder) CreateArticle(ctx, article, articleVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockarticleRepo)(nil).CreateArticle), ctx, article, articleVersion)
}

// CreateArticleVersion mocks base method.
func (m *MockarticleRepo) CreateArticleVersion(ctx context.Context, articleVersion entity.ArticleVersion) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticleVersion", ctx, articleVersion)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArticleVersion indicates an expected call of CreateArticleVersion.
func (mr *MockarticleRepoMockRecorder) CreateArticleVersion(ctx, articleVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticleVersion", reflect.TypeOf((*MockarticleRepo)(nil).CreateArticleVersion), ctx, articleVersion)
}

// DeleteArticle mocks base method.
func (m *MockarticleRepo) DeleteArticle(ctx context.Context, articleID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticle", ctx, articleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticle indicates an expected call of DeleteArticle.
func (mr *MockarticleRepoMockRecorder) DeleteArticle(ctx, articleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockarticleRepo)(nil).DeleteArticle), ctx, articleID)
}

// GetArticleVersionWithIDAndArticleID mocks base method.
func (m *MockarticleRepo) GetArticleVersionWithIDAndArticleID(ctx context.Context, articleID, articleVersionID int64) (*entity.ArticleVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleVersionWithIDAndArticleID", ctx, articleID, articleVersionID)
	ret0, _ := ret[0].(*entity.ArticleVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleVersionWithIDAndArticleID indicates an expected call of GetArticleVersionWithIDAndArticleID.
func (mr *MockarticleRepoMockRecorder) GetArticleVersionWithIDAndArticleID(ctx, articleID, articleVersionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleVersionWithIDAndArticleID", reflect.TypeOf((*MockarticleRepo)(nil).GetArticleVersionWithIDAndArticleID), ctx, articleID, articleVersionID)
}

// GetArticleVersionsWithArticleIDAndStatuses mocks base method.
func (m *MockarticleRepo) GetArticleVersionsWithArticleIDAndStatuses(ctx context.Context, ArticleID int64, status ...constanta.ArticleVersionStatus) ([]entity.ArticleVersion, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ArticleID}
	for _, a := range status {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArticleVersionsWithArticleIDAndStatuses", varargs...)
	ret0, _ := ret[0].([]entity.ArticleVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleVersionsWithArticleIDAndStatuses indicates an expected call of GetArticleVersionsWithArticleIDAndStatuses.
func (mr *MockarticleRepoMockRecorder) GetArticleVersionsWithArticleIDAndStatuses(ctx, ArticleID any, status ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ArticleID}, status...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleVersionsWithArticleIDAndStatuses", reflect.TypeOf((*MockarticleRepo)(nil).GetArticleVersionsWithArticleIDAndStatuses), varargs...)
}

// GetArticleWithID mocks base method.
func (m *MockarticleRepo) GetArticleWithID(ctx context.Context, articleID int64) (*entity.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleWithID", ctx, articleID)
	ret0, _ := ret[0].(*entity.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleWithID indicates an expected call of GetArticleWithID.
func (mr *MockarticleRepoMockRecorder) GetArticleWithID(ctx, articleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleWithID", reflect.TypeOf((*MockarticleRepo)(nil).GetArticleWithID), ctx, articleID)
}

// GetArticles mocks base method.
func (m *MockarticleRepo) GetArticles(ctx context.Context, req entity.GetArticlesQueryServiceParams) ([]entity.ArticleVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticles", ctx, req)
	ret0, _ := ret[0].([]entity.ArticleVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticles indicates an expected call of GetArticles.
func (mr *MockarticleRepoMockRecorder) GetArticles(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticles", reflect.TypeOf((*MockarticleRepo)(nil).GetArticles), ctx, req)
}

// GetTagsWithArticleVersionID mocks base method.
func (m *MockarticleRepo) GetTagsWithArticleVersionID(ctx context.Context, articleVersionID int64) ([]entity.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsWithArticleVersionID", ctx, articleVersionID)
	ret0, _ := ret[0].([]entity.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsWithArticleVersionID indicates an expected call of GetTagsWithArticleVersionID.
func (mr *MockarticleRepoMockRecorder) GetTagsWithArticleVersionID(ctx, articleVersionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsWithArticleVersionID", reflect.TypeOf((*MockarticleRepo)(nil).GetTagsWithArticleVersionID), ctx, articleVersionID)
}

// UpdateArticleStatus mocks base method.
func (m *MockarticleRepo) UpdateArticleStatus(ctx context.Context, articleID, articleVersionID int64, status, prevStatus constanta.ArticleVersionStatus, updatedBy uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleStatus", ctx, articleID, articleVersionID, status, prevStatus, updatedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArticleStatus indicates an expected call of UpdateArticleStatus.
func (mr *MockarticleRepoMockRecorder) UpdateArticleStatus(ctx, articleID, articleVersionID, status, prevStatus, updatedBy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleStatus", reflect.TypeOf((*MockarticleRepo)(nil).UpdateArticleStatus), ctx, articleID, articleVersionID, status, prevStatus, updatedBy)
}

// UpdateArticleVersionRelationshipScore mocks base method.
func (m *MockarticleRepo) UpdateArticleVersionRelationshipScore(ctx context.Context, articleVersionID int64, relationshipScore float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleVersionRelationshipScore", ctx, articleVersionID, relationshipScore)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArticleVersionRelationshipScore indicates an expected call of UpdateArticleVersionRelationshipScore.
func (mr *MockarticleRepoMockRecorder) UpdateArticleVersionRelationshipScore(ctx, articleVersionID, relationshipScore any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleVersionRelationshipScore", reflect.TypeOf((*MockarticleRepo)(nil).UpdateArticleVersionRelationshipScore), ctx, articleVersionID, relationshipScore)
}
