// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/elangreza/content-management-system/internal/service (interfaces: tagTrigger)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_tag_trigger.go -package=service_mock . tagTrigger
//

// Package service_mock is a generated GoMock package.
package service_mock

import (
	reflect "reflect"

	constanta "github.com/elangreza/content-management-system/internal/constanta"
	gomock "go.uber.org/mock/gomock"
)

// MocktagTrigger is a mock of tagTrigger interface.
type MocktagTrigger struct {
	ctrl     *gomock.Controller
	recorder *MocktagTriggerMockRecorder
	isgomock struct{}
}

// MocktagTriggerMockRecorder is the mock recorder for MocktagTrigger.
type MocktagTriggerMockRecorder struct {
	mock *MocktagTrigger
}

// NewMocktagTrigger creates a new mock instance.
func NewMocktagTrigger(ctrl *gomock.Controller) *MocktagTrigger {
	mock := &MocktagTrigger{ctrl: ctrl}
	mock.recorder = &MocktagTriggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktagTrigger) EXPECT() *MocktagTriggerMockRecorder {
	return m.recorder
}

// CreateTagTrigger mocks base method.
func (m *MocktagTrigger) CreateTagTrigger(name constanta.TagServiceAction, payload any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateTagTrigger", name, payload)
}

// CreateTagTrigger indicates an expected call of CreateTagTrigger.
func (mr *MocktagTriggerMockRecorder) CreateTagTrigger(name, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagTrigger", reflect.TypeOf((*MocktagTrigger)(nil).CreateTagTrigger), name, payload)
}
