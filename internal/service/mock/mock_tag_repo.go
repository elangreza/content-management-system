// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/elangreza/content-management-system/internal/service (interfaces: tagRepo)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_tag_repo.go -package=service_mock . tagRepo
//

// Package service_mock is a generated GoMock package.
package service_mock

import (
	context "context"
	reflect "reflect"

	constanta "github.com/elangreza/content-management-system/internal/constanta"
	entity "github.com/elangreza/content-management-system/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MocktagRepo is a mock of tagRepo interface.
type MocktagRepo struct {
	ctrl     *gomock.Controller
	recorder *MocktagRepoMockRecorder
	isgomock struct{}
}

// MocktagRepoMockRecorder is the mock recorder for MocktagRepo.
type MocktagRepoMockRecorder struct {
	mock *MocktagRepo
}

// NewMocktagRepo creates a new mock instance.
func NewMocktagRepo(ctrl *gomock.Controller) *MocktagRepo {
	mock := &MocktagRepo{ctrl: ctrl}
	mock.recorder = &MocktagRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktagRepo) EXPECT() *MocktagRepoMockRecorder {
	return m.recorder
}

// GetArticleTags mocks base method.
func (m *MocktagRepo) GetArticleTags(ctx context.Context, status constanta.ArticleVersionStatus) ([]entity.ArticleVersionTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleTags", ctx, status)
	ret0, _ := ret[0].([]entity.ArticleVersionTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleTags indicates an expected call of GetArticleTags.
func (mr *MocktagRepoMockRecorder) GetArticleTags(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleTags", reflect.TypeOf((*MocktagRepo)(nil).GetArticleTags), ctx, status)
}

// GetTagUsage mocks base method.
func (m *MocktagRepo) GetTagUsage(ctx context.Context) (map[string]entity.TagUsage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagUsage", ctx)
	ret0, _ := ret[0].(map[string]entity.TagUsage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagUsage indicates an expected call of GetTagUsage.
func (mr *MocktagRepoMockRecorder) GetTagUsage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagUsage", reflect.TypeOf((*MocktagRepo)(nil).GetTagUsage), ctx)
}

// GetTags mocks base method.
func (m *MocktagRepo) GetTags(ctx context.Context, names ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range names {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTags", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MocktagRepoMockRecorder) GetTags(ctx any, names ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, names...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MocktagRepo)(nil).GetTags), varargs...)
}

// UpsertTags mocks base method.
func (m *MocktagRepo) UpsertTags(ctx context.Context, names ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range names {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTags", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTags indicates an expected call of UpsertTags.
func (mr *MocktagRepoMockRecorder) UpsertTags(ctx any, names ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, names...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTags", reflect.TypeOf((*MocktagRepo)(nil).UpsertTags), varargs...)
}
